// Valid basic declarations
mut u8 x := 0;
mut u8 y := 3;
bool condition := true;
f64 pi := 3.14159;
String hello := "world";
u8 my_char := 'A';

mut u8 a := 3.14;
bool b := 5;
u8 c := "string"; // invalid
f64 d := true;

// Control flow tests
if (x < y and condition) {
    print "Valid comparison";
} else {
    if (x = y or !false) {
        print "valid";
    }
}

!5; // ok conversion

mut u8 i;
for (i := 0; i < 5; i := i + 1) {
    print i;
    if (i % 2 = 0) {
        continue;
    }
}

{
    u8 inner := 10;
    print inner;
}
inner := 5; // invalid out of scope

func ADD (a: u8, b: u8) returns (result: u8) {
    result := a + b;
    return result;
}

u8 sum := ADD(100, 200);
ADD(true, false);

mut f64 float_val := 3.14;
u8 int_val := float_val;

bool b1 := true;
bool b2 := false;
bool b3 := b1 and b2;
bool b4 := b1 or b2;
bool b5 := 1 and true;

for (mut u8 j := 0; j < 10; j := j + 1) {
    while (true) {
        if (j = 5) {
            break;
        }
    }
}
break;

{
    u8 shadow := 10;
    {
        u8 shadow := 20;
    }
}

func LOG (message: String) {
    print message;
    return "something";     // Invalid return
}

func BAD_RETURN () returns (value: u8) {
    // no return here
}

// Modulo operations
u8 mod_result := 10 % 3;
5.5 % 2;  // Invalid float modulo
